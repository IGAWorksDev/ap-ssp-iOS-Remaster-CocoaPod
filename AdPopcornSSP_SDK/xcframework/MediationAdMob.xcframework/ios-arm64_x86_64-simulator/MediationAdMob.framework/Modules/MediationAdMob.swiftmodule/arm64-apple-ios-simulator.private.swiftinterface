// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MediationAdMob
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdPopcornSSP_SDK
import Foundation
import GoogleMobileAds
@_exported import MediationAdMob
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class AdMobInterstitialVideoAdapter : AdPopcornSSP_SDK.InterstitialVideoAdapterProtocol {
  final public var delegate: (any AdPopcornSSP_SDK.InterstitialVideoAdapterDelegate)?
  final public var rootViewController: UIKit.UIViewController?
  public init(placementID: Swift.String, rootViewController: UIKit.UIViewController?)
  final public func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
  final public func stop()
  final public func connectDelegate(delegate: any AdPopcornSSP_SDK.InterstitialVideoAdapterDelegate)
  final public func disconnectDelegate()
  @objc deinit
}
extension MediationAdMob.AdMobInterstitialVideoAdapter : AdPopcornSSP_SDK.InterstitialVideoAdapterDelegate {
  final public func interstitialVideoLoadSuccess()
  final public func interstitialVideoLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  final public func interstitialVideoShowSuccess(message: Swift.String)
  final public func interstitialVideoShowFail(message: Swift.String)
  final public func interstitialVideoClicked(message: Swift.String)
  final public func interstitialVideoClosed(message: Swift.String)
}
@objc @_hasMissingDesignatedInitializers final public class AdMobMediationInterstitialAd : ObjectiveC.NSObject {
  final public func present(from: UIKit.UIViewController, completion: () -> Swift.Void)
  @objc deinit
}
extension MediationAdMob.AdMobMediationInterstitialAd : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc final public func adWillPresentFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func ad(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adDidRecordClick(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adDidDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
}
final public class AdMobInterstitialAdapter : AdPopcornSSP_SDK.InterstitialAdapterProtocol {
  final public var rootViewController: UIKit.UIViewController?
  final public var delegate: (any AdPopcornSSP_SDK.InterstitialAdapterDelegate)?
  public init(placementID: Swift.String, rootViewController: UIKit.UIViewController?)
  final public func connectDelegate(delegate: any AdPopcornSSP_SDK.InterstitialAdapterDelegate)
  final public func disconnectDelegate()
  final public func stop()
  final public func present(from: UIKit.UIViewController, completion: () -> Swift.Void)
  @objc deinit
}
extension MediationAdMob.AdMobInterstitialAdapter : AdPopcornSSP_SDK.InterstitialAdapterDelegate {
  final public func interstitialLoadSuccess()
  final public func interstitialLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  final public func interstitialShowSuccess(message: Swift.String)
  final public func interstitialShowFail(message: Swift.String)
  final public func interstitialClicked(message: Swift.String)
  final public func interstitialClosed(message: Swift.String)
}
@objc @_hasMissingDesignatedInitializers final public class AdMobMediationRewardVideoAd : ObjectiveC.NSObject {
  final public func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
  @objc deinit
}
extension MediationAdMob.AdMobMediationRewardVideoAd : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc final public func ad(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adWillPresentFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adDidDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
}
@_inheritsConvenienceInitializers @objc final public class AdMobNativeAdRenderable : ObjectiveC.NSObject {
  final public var admobNativewAdView: GoogleMobileAds.GADNativeAdView?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class AdMobMediationNativeAdView : UIKit.UIView {
  @objc deinit
}
extension MediationAdMob.AdMobMediationNativeAdView : GoogleMobileAds.GADNativeAdLoaderDelegate, GoogleMobileAds.GADNativeAdDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func adLoader(_ adLoader: GoogleMobileAds.GADAdLoader, didFailToReceiveAdWithError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc final public func adLoaderDidFinishLoading(_ adLoader: GoogleMobileAds.GADAdLoader)
  @_Concurrency.MainActor(unsafe) @objc final public func adLoader(_ adLoader: GoogleMobileAds.GADAdLoader, didReceive nativeAd: GoogleMobileAds.GADNativeAd)
}
final public class AdMobBannerAdapter : AdPopcornSSP_SDK.BannerAdapterProtocol {
  weak final public var delegate: (any AdPopcornSSP_SDK.BannerAdapterDelegate)?
  weak final public var rootViewController: UIKit.UIViewController?
  public init(placementID: Swift.String, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, rootViewController: UIKit.UIViewController?)
  final public func connectDelegate(delegate: any AdPopcornSSP_SDK.BannerAdapterDelegate)
  final public func disconnectDelegate()
  final public func stop()
  @objc deinit
}
extension MediationAdMob.AdMobBannerAdapter : AdPopcornSSP_SDK.BannerAdapterDelegate {
  final public func bannerViewSuccess(bannerView: UIKit.UIView)
  final public func bannerViewFailed(bannerView: UIKit.UIView, error: AdPopcornSSP_SDK.NetworkError)
  final public func bannerViewClicked(message: Swift.String)
  final public func bannerViewImpression(message: Swift.String)
}
@objc @_hasMissingDesignatedInitializers final public class AdMobMediationInterstitialVideoAd : ObjectiveC.NSObject {
  final public func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
  @objc deinit
}
extension MediationAdMob.AdMobMediationInterstitialVideoAd : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc final public func adWillPresentFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func ad(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adDidRecordClick(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adDidDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
}
final public class AdMobRewardVideoAdapter : AdPopcornSSP_SDK.RewardVideoAdapterProtocol {
  final public var rootViewController: UIKit.UIViewController?
  final public var delegate: (any AdPopcornSSP_SDK.RewardVideoAdapterDelegate)?
  public init(placementID: Swift.String, rootViewController: UIKit.UIViewController?)
  final public func connectDelegate(delegate: any AdPopcornSSP_SDK.RewardVideoAdapterDelegate)
  final public func disconnectDelegate()
  final public func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
  final public func stop()
  @objc deinit
}
extension MediationAdMob.AdMobRewardVideoAdapter : AdPopcornSSP_SDK.RewardVideoAdapterDelegate {
  final public func rewardVideoLoadSuccess()
  final public func rewardVideoLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  final public func rewardVideoShowSuccess(message: Swift.String)
  final public func rewardVideoShowFail(message: Swift.String)
  final public func rewardVideoClicked(message: Swift.String)
  final public func rewardVideoClosed(message: Swift.String)
  final public func rewardVideoCompleted()
}
final public class AdMobNativeAdapter : AdPopcornSSP_SDK.NativeAdapterProtocol {
  final public var render: Swift.AnyObject?
  weak final public var delegate: (any AdPopcornSSP_SDK.NativeViewAdapterDelegate)?
  final public var rootViewController: UIKit.UIViewController?
  public init(placementID: Swift.String, rootViewController: UIKit.UIViewController?, render: Swift.AnyObject?)
  final public func connectDelegate(delegate: any AdPopcornSSP_SDK.NativeViewAdapterDelegate)
  final public func disconnectDelegate()
  final public func stop()
  @objc deinit
}
extension MediationAdMob.AdMobNativeAdapter : AdPopcornSSP_SDK.NativeViewAdapterDelegate {
  final public func nativeLoadSuccess()
  final public func nativeLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  final public func nativeClicked(message: Swift.String)
  final public func nativeImpression(message: Swift.String)
}
extension AdPopcornSSP_SDK.AdPopcornNativeAd {
  @_Concurrency.MainActor(unsafe) final public func bindAdMobRenderer(renderable: Swift.AnyObject)
}
final public class AdMobInitializationAdapter : AdPopcornSSP_SDK.InitializationProtocol {
  public init()
  final public func start()
  @objc deinit
}
