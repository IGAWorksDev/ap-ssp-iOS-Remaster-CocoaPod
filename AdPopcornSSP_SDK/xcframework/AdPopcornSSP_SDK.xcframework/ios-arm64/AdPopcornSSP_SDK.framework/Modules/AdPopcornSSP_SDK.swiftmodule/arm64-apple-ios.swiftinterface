// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AdPopcornSSP_SDK
import AVFoundation
@_exported import AdPopcornSSP_SDK
import AdSupport
import AppTrackingTransparency
import CoreTelephony
import Foundation
import Network
import OSLog
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum MediationCompany : Swift.Int {
  case adPopcorn = 0
  case AdMob = 1
  case Cauly = 4
  case MezzoMedia = 5
  case AdFit = 10
  case Vungle = 14
  case AppLovin_MAX = 15
  case Fyber = 16
  case AppLovin = 21
  case NAM = 22
  case ADOP = 24
  case error = 99999
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AdPopcornBannerSize : Swift.Int {
  case banner320x50 = 1
  case banner320x100 = 3
  case banner300x250 = 2
  case bannerAdaptiveSize = 4
  public var bannerType: Swift.Int {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public var width: CoreFoundation.CGFloat {
    get
  }
  public var AdFitSize: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class APLogger {
  public enum Log {
    case all
    case network
    case debug
    case error
    case none
    public static func == (a: AdPopcornSSP_SDK.APLogger.Log, b: AdPopcornSSP_SDK.APLogger.Log) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
extension AdPopcornSSP_SDK.APLogger {
  public static func debug(selfType: Any, _ message: Any, _ arguments: Any...)
  public static func info(selfType: Any, _ message: Any, _ arguments: Any...)
  public static func network(selfType: Any, _ message: Any, _ arguments: Any...)
  public static func error(selfType: Any, _ message: Any, _ arguments: Any...)
}
@objc public protocol AdPopcornInterstitialAdDelegate {
  @objc optional func AdPopcornInterstitialAdLoadSuccess(interstitialAd: AdPopcornSSP_SDK.AdPopcornInterstitialAd)
  @objc optional func AdPopcornInterstitialAdLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  @objc optional func adPopcorninterstitialAdShowSuccess(message: Swift.String)
  @objc optional func adPopcorninterstitialAdShowFail(message: Swift.String)
  @objc optional func adPopcorninterstitialAdClicked(message: Swift.String)
  @objc optional func adPopcorninterstitialAdClosed(message: Swift.String)
}
@objc final public class AdPopcornInterstitialAd : ObjectiveC.NSObject {
  weak final public var delegate: (any AdPopcornSSP_SDK.AdPopcornInterstitialAdDelegate)?
  public init(placementID: Swift.String, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
  final public func load()
  final public func present(from: UIKit.UIViewController)
}
extension AdPopcornSSP_SDK.AdPopcornInterstitialAd : AdPopcornSSP_SDK.InterstitialAdapterDelegate {
  final public func interstitialLoadSuccess()
  final public func interstitialLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  final public func interstitialShowSuccess(message: Swift.String)
  final public func interstitialShowFail(message: Swift.String)
  final public func interstitialClicked(message: Swift.String)
  final public func interstitialClosed(message: Swift.String)
}
@_inheritsConvenienceInitializers @objc final public class APSSPAdPopcornNativeAdRenderable : ObjectiveC.NSObject {
  final public var nativeView: AdPopcornSSP_SDK.AdPopcornNativeAdView?
  final public var adTitleLabel: UIKit.UILabel?
  final public var adtextLabel: UIKit.UILabel?
  final public var adMainImageView: UIKit.UIImageView?
  final public var adAppIconView: UIKit.UIImageView?
  final public var adCTAButton: UIKit.UIButton?
  @objc override dynamic public init()
  @objc deinit
}
public protocol InterstitialVideoAdapterDelegate : AnyObject {
  func interstitialVideoLoadSuccess()
  func interstitialVideoLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  func interstitialVideoShowSuccess(message: Swift.String)
  func interstitialVideoShowFail(message: Swift.String)
  func interstitialVideoClicked(message: Swift.String)
  func interstitialVideoClosed(message: Swift.String)
}
public protocol InterstitialVideoAdapterProtocol : AnyObject {
  var delegate: (any AdPopcornSSP_SDK.InterstitialVideoAdapterDelegate)? { get }
  var rootViewController: UIKit.UIViewController? { get }
  init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?)
  func connectDelegate(delegate: any AdPopcornSSP_SDK.InterstitialVideoAdapterDelegate)
  func disconnectDelegate()
  func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
}
public protocol InterstitialAdapterDelegate : AnyObject {
  func interstitialLoadSuccess()
  func interstitialLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  func interstitialShowSuccess(message: Swift.String)
  func interstitialShowFail(message: Swift.String)
  func interstitialClicked(message: Swift.String)
  func interstitialClosed(message: Swift.String)
}
public protocol InterstitialAdapterProtocol : AnyObject {
  var delegate: (any AdPopcornSSP_SDK.InterstitialAdapterDelegate)? { get }
  var rootViewController: UIKit.UIViewController? { get }
  init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?)
  func connectDelegate(delegate: any AdPopcornSSP_SDK.InterstitialAdapterDelegate)
  func disconnectDelegate()
  func present(from: UIKit.UIViewController, completion: () -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class AdPopcornSSP {
  public static func setUSerID(usn: Swift.String)
  public static func initializeSDK(appKey: Swift.String)
  public static func setLogType(_ type: AdPopcornSSP_SDK.APLogger.Log)
  public static func presentCSViewController(_ rootViewController: UIKit.UIViewController, userID: Swift.String)
  @objc deinit
}
extension AdPopcornSSP_SDK.AdPopcornSSP {
  public static func changeAPPKey(appKey: Swift.String)
  public static func changeBaseURL(type: AdPopcornSSP_SDK.BaseURLType)
}
public enum BaseURLType : Swift.String {
  case test
  case release
  case GO
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol AdPopcornInterstitialVideoAdDelegate {
  @objc optional func AdPopcornInterstitialVideoAdLoadSuccess(interstitialVideoAd: AdPopcornSSP_SDK.AdPopcornInterstitialVideoAd)
  @objc optional func AdPopcornInterstitialVideoAdLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  @objc optional func adPopcorninterstitialVideoAdShowSuccess(message: Swift.String)
  @objc optional func adPopcorninterstitialVideoAdShowFail(message: Swift.String)
  @objc optional func adPopcorninterstitialVideoAdClicked(message: Swift.String)
  @objc optional func adPopcorninterstitialVideoAdClosed(message: Swift.String)
}
@objc final public class AdPopcornInterstitialVideoAd : ObjectiveC.NSObject {
  weak final public var delegate: (any AdPopcornSSP_SDK.AdPopcornInterstitialVideoAdDelegate)?
  public init(placementID: Swift.String, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
  final public func present(from: UIKit.UIViewController)
  final public func load()
}
extension AdPopcornSSP_SDK.AdPopcornInterstitialVideoAd : AdPopcornSSP_SDK.InterstitialVideoAdapterDelegate {
  final public func interstitialVideoLoadSuccess()
  final public func interstitialVideoLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  final public func interstitialVideoShowSuccess(message: Swift.String)
  final public func interstitialVideoShowFail(message: Swift.String)
  final public func interstitialVideoClicked(message: Swift.String)
  final public func interstitialVideoClosed(message: Swift.String)
}
@objc @_Concurrency.MainActor(unsafe) open class AdPopcornNativeAdView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol InitializationProtocol : AnyObject {
  init()
  func start(appkey: Swift.String)
}
@_hasMissingDesignatedInitializers public class MySDK {
  public static var bundle: Foundation.Bundle {
    get
  }
  public static func loadJSONFile(named fileName: Swift.String) -> Foundation.Data?
  @objc deinit
}
@objc public protocol AdPopcornNativeAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func adPopcornNativeAdLoadSuccess(nativewAdView: AdPopcornSSP_SDK.AdPopcornNativeAd)
  @objc optional func adPopcornNativeAdLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  @objc optional func adPopcornNativeAdClicked(message: Swift.String)
  @objc optional func adPopcornNativeAdImpression(message: Swift.String)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class AdPopcornNativeAd : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any AdPopcornSSP_SDK.AdPopcornNativeAdDelegate)?
  @_Concurrency.MainActor(unsafe) final public var placementID: Swift.String
  @_Concurrency.MainActor(unsafe) final public var adMobRenderable: Swift.AnyObject?
  @_Concurrency.MainActor(unsafe) final public var adopRenderable: Swift.AnyObject?
  @_Concurrency.MainActor(unsafe) final public var namRenderable: Swift.AnyObject?
  @_Concurrency.MainActor(unsafe) final public var adfitRenderable: Swift.AnyObject?
  @_Concurrency.MainActor(unsafe) final public var vungleRenderable: Swift.AnyObject?
  @_Concurrency.MainActor(unsafe) final public var applovinMaxRenderable: Swift.AnyObject?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(placementID: Swift.String, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
  @_Concurrency.MainActor(unsafe) final public func load()
  @_Concurrency.MainActor(unsafe) final public func stop()
}
extension AdPopcornSSP_SDK.AdPopcornNativeAd : AdPopcornSSP_SDK.NativeViewAdapterDelegate {
  @_Concurrency.MainActor(unsafe) final public func nativeLoadSuccess()
  @_Concurrency.MainActor(unsafe) final public func nativeLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  @_Concurrency.MainActor(unsafe) final public func nativeClicked(message: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func nativeImpression(message: Swift.String)
}
extension AdPopcornSSP_SDK.AdPopcornNativeAd {
  @_Concurrency.MainActor(unsafe) final public func bindAdPopcronRenderer(adPopcornRender: AdPopcornSSP_SDK.APSSPAdPopcornNativeAdRenderable, useTemplate: Swift.Bool = false)
}
public protocol NativeViewAdapterDelegate : AnyObject {
  func nativeLoadSuccess()
  func nativeLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  func nativeClicked(message: Swift.String)
  func nativeImpression(message: Swift.String)
}
public protocol NativeAdapterProtocol : AnyObject {
  var delegate: (any AdPopcornSSP_SDK.NativeViewAdapterDelegate)? { get }
  var rootViewController: UIKit.UIViewController? { get }
  var render: Swift.AnyObject? { get }
  init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?, render: Swift.AnyObject)
  func connectDelegate(delegate: any AdPopcornSSP_SDK.NativeViewAdapterDelegate)
  func disconnectDelegate()
  func stop()
}
@objc public enum NetworkError : Swift.Int, Swift.Error {
  case serverError = 200
  case parameterError = 1000
  case appKeyError = 2000
  case placementIDError = 2030
  case emptyCampaignError = 2100
  case nativePlacementNoInitialized = 3200
  case assetError = 3300
  case mediationInvalidIntegrationKey = 4000
  case mediationAdapterNotInitialized = 4001
  case serverTimeout = 5000
  case loadAdFailed = 5001
  case noAdError = 5002
  case noInterstitialLoaded = 5003
  case noRewardVideoAdLoaded = 5005
  case gdprConsentUnavailable = 5008
  case noInterstitialVideoAdLoaded = 5009
  case decodingError = 8888
  case unknownServerError = 9999
  case nextMediation = 100000
  case vastParsingError = 200000
  case delegateError = 300000
  case nativeViewCustomError = 300001
  case rootviewControllerError = 300002
  public var errorMessage: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol RewardVideoAdapterDelegate : AnyObject {
  func rewardVideoLoadSuccess()
  func rewardVideoLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  func rewardVideoShowSuccess(message: Swift.String)
  func rewardVideoShowFail(message: Swift.String)
  func rewardVideoClicked(message: Swift.String)
  func rewardVideoClosed(message: Swift.String)
  func rewardVideoCompleted()
}
public protocol RewardVideoAdapterProtocol : AnyObject {
  var delegate: (any AdPopcornSSP_SDK.RewardVideoAdapterDelegate)? { get }
  var rootViewController: UIKit.UIViewController? { get }
  init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?)
  func connectDelegate(delegate: any AdPopcornSSP_SDK.RewardVideoAdapterDelegate)
  func disconnectDelegate()
  func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
}
@objc public protocol AdPopcornBannerViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func adPopcornBannerViewLoadSuccess(bannerView: AdPopcornSSP_SDK.AdPopcornBannerView)
  @objc optional func adPopcornBannerViewLoadFail(bannerView: AdPopcornSSP_SDK.AdPopcornBannerView, error: AdPopcornSSP_SDK.NetworkError)
  @objc optional func adPopcornBannerViewClicked(message: Swift.String)
  @objc optional func adPopcornBannerViewImpression(message: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class AdPopcornBannerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any AdPopcornSSP_SDK.AdPopcornBannerViewDelegate)?
  @_Concurrency.MainActor(unsafe) public init(placementID: Swift.String, bannerSize: AdPopcornSSP_SDK.AdPopcornBannerSize, parentView: UIKit.UIView, rootViewController: UIKit.UIViewController? = nil, adRefreshTime: Swift.Int = 60, animationType: AdPopcornSSP_SDK.AdPopcornBannerView.AnimationType = .none)
  @objc deinit
  @_Concurrency.MainActor(unsafe) final public func loadAd()
  @_Concurrency.MainActor(unsafe) final public func stop()
}
extension AdPopcornSSP_SDK.AdPopcornBannerView : AdPopcornSSP_SDK.BannerAdapterDelegate {
  @_Concurrency.MainActor(unsafe) final public func bannerViewSuccess(bannerView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) final public func bannerViewClicked(message: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func bannerViewFailed(bannerView: UIKit.UIView, error: AdPopcornSSP_SDK.NetworkError)
  @_Concurrency.MainActor(unsafe) final public func bannerViewImpression(message: Swift.String)
}
extension AdPopcornSSP_SDK.AdPopcornBannerView {
  public enum AnimationType : Swift.CaseIterable {
    case none
    case curlDown
    case curlUp
    case flipFromLeft
    case flipFromRight
    case fadeIn
    public static func == (a: AdPopcornSSP_SDK.AdPopcornBannerView.AnimationType, b: AdPopcornSSP_SDK.AdPopcornBannerView.AnimationType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [AdPopcornSSP_SDK.AdPopcornBannerView.AnimationType]
    public static var allCases: [AdPopcornSSP_SDK.AdPopcornBannerView.AnimationType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc public protocol AdPopcornRewardVideoAdDelegate {
  @objc optional func AdPopcornRewardVideoAdLoadSuccess(rewardVideoAd: AdPopcornSSP_SDK.AdPopcornRewardVideoAd)
  @objc optional func AdPopcornRewardVideoAdLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  @objc optional func adPopcornRewardVideoAdShowSuccess(message: Swift.String)
  @objc optional func adPopcornRewardVideoAdShowFail(message: Swift.String)
  @objc optional func adPopcornRewardVideoAdClicked(message: Swift.String)
  @objc optional func adPopcornRewardVideoAdClosed(message: Swift.String)
  @objc optional func adPopcornRewardVideoAdCompleted(currenMediationType: AdPopcornSSP_SDK.MediationCompany)
}
@objc final public class AdPopcornRewardVideoAd : ObjectiveC.NSObject {
  weak final public var delegate: (any AdPopcornSSP_SDK.AdPopcornRewardVideoAdDelegate)?
  public init(placementID: Swift.String, rootViewController: UIKit.UIViewController? = nil)
  @objc deinit
  final public func present(from: UIKit.UIViewController)
  final public func load()
}
extension AdPopcornSSP_SDK.AdPopcornRewardVideoAd : AdPopcornSSP_SDK.RewardVideoAdapterDelegate {
  final public func rewardVideoLoadSuccess()
  final public func rewardVideoLoadFail(error: AdPopcornSSP_SDK.NetworkError)
  final public func rewardVideoShowSuccess(message: Swift.String)
  final public func rewardVideoShowFail(message: Swift.String)
  final public func rewardVideoClicked(message: Swift.String)
  final public func rewardVideoClosed(message: Swift.String)
  final public func rewardVideoCompleted()
}
public protocol BannerAdapterDelegate : AnyObject {
  func bannerViewSuccess(bannerView: UIKit.UIView)
  func bannerViewFailed(bannerView: UIKit.UIView, error: AdPopcornSSP_SDK.NetworkError)
  func bannerViewClicked(message: Swift.String)
  func bannerViewImpression(message: Swift.String)
}
public protocol BannerAdapterProtocol : AnyObject {
  var delegate: (any AdPopcornSSP_SDK.BannerAdapterDelegate)? { get }
  var rootViewController: UIKit.UIViewController? { get }
  init(placementDic: [Swift.String : Swift.String], bannerType: AdPopcornSSP_SDK.AdPopcornBannerSize, rootViewController: UIKit.UIViewController?)
  func connectDelegate(delegate: any AdPopcornSSP_SDK.BannerAdapterDelegate)
  func disconnectDelegate()
  func stop()
}
extension AdPopcornSSP_SDK.MediationCompany : Swift.Equatable {}
extension AdPopcornSSP_SDK.MediationCompany : Swift.Hashable {}
extension AdPopcornSSP_SDK.MediationCompany : Swift.RawRepresentable {}
extension AdPopcornSSP_SDK.AdPopcornBannerSize : Swift.Equatable {}
extension AdPopcornSSP_SDK.AdPopcornBannerSize : Swift.Hashable {}
extension AdPopcornSSP_SDK.AdPopcornBannerSize : Swift.RawRepresentable {}
extension AdPopcornSSP_SDK.APLogger.Log : Swift.Equatable {}
extension AdPopcornSSP_SDK.APLogger.Log : Swift.Hashable {}
extension AdPopcornSSP_SDK.BaseURLType : Swift.Equatable {}
extension AdPopcornSSP_SDK.BaseURLType : Swift.Hashable {}
extension AdPopcornSSP_SDK.BaseURLType : Swift.RawRepresentable {}
extension AdPopcornSSP_SDK.NetworkError : Swift.Equatable {}
extension AdPopcornSSP_SDK.NetworkError : Swift.Hashable {}
extension AdPopcornSSP_SDK.NetworkError : Swift.RawRepresentable {}
extension AdPopcornSSP_SDK.AdPopcornBannerView.AnimationType : Swift.Equatable {}
extension AdPopcornSSP_SDK.AdPopcornBannerView.AnimationType : Swift.Hashable {}
