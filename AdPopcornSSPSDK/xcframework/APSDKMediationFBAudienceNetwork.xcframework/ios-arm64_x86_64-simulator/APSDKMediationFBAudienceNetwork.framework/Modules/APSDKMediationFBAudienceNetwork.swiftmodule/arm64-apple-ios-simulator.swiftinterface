// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name APSDKMediationFBAudienceNetwork
@_exported import APSDKMediationFBAudienceNetwork
import AdPopcornSSPSDK
import FBAudienceNetwork
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class FBAudienceNetworkBannerAdapter : AdPopcornSSPSDK.BannerAdapterInappBiddingProtocol {
  weak final public var delegate: (any AdPopcornSSPSDK.BannerAdapterDelegate)?
  weak final public var rootViewController: UIKit.UIViewController?
  public init(placementDic: [Swift.String : Swift.String], bannerType: AdPopcornSSPSDK.AdPopcornBannerSize, rootViewController: UIKit.UIViewController?, info: [Swift.String : Any?])
  public init(inappbiddingPlacementDic: [Swift.String : Swift.String], bannerType: AdPopcornSSPSDK.AdPopcornBannerSize, rootViewController: UIKit.UIViewController?)
  final public func getBiddingToken() -> Swift.String
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.BannerAdapterDelegate)
  final public func disconnectDelegate()
  final public func stop()
  @objc deinit
}
extension APSDKMediationFBAudienceNetwork.FBAudienceNetworkBannerAdapter : AdPopcornSSPSDK.BannerAdapterDelegate {
  final public func bannerViewSuccess(bannerView: UIKit.UIView)
  final public func bannerViewFailed(bannerView: UIKit.UIView, error: AdPopcornSSPSDK.NetworkError)
  final public func bannerViewClicked(message: Swift.String)
  final public func bannerViewImpression(message: Swift.String)
}
final public class FBAudienceNetworkInterstitialAdapter : AdPopcornSSPSDK.InterstitialAdapterInappBiddingProtocol {
  final public var rootViewController: UIKit.UIViewController?
  final public var delegate: (any AdPopcornSSPSDK.InterstitialAdapterDelegate)?
  public init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?, info: [Swift.String : Any?])
  public init(inappbiddingPlacementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?)
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.InterstitialAdapterDelegate)
  final public func disconnectDelegate()
  final public func present(from: UIKit.UIViewController, completion: () -> Swift.Void)
  final public func getBiddingToken() -> Swift.String
  @objc deinit
}
extension APSDKMediationFBAudienceNetwork.FBAudienceNetworkInterstitialAdapter : AdPopcornSSPSDK.InterstitialAdapterDelegate {
  final public func interstitialLoadSuccess()
  final public func interstitialLoadFail(error: AdPopcornSSPSDK.NetworkError)
  final public func interstitialShowSuccess(message: Swift.String)
  final public func interstitialShowFail(message: Swift.String)
  final public func interstitialClicked(message: Swift.String)
  final public func interstitialClosed(message: Swift.String)
}
final public class FBAudienceNetworkInterstitialVideoAdapter : AdPopcornSSPSDK.InterstitialVideoAdapterInappBiddingProtocol {
  final public var delegate: (any AdPopcornSSPSDK.InterstitialVideoAdapterDelegate)?
  final public var rootViewController: UIKit.UIViewController?
  public init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?, info: [Swift.String : Any?])
  public init(inappbiddingPlacementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?)
  final public func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.InterstitialVideoAdapterDelegate)
  final public func disconnectDelegate()
  final public func getBiddingToken() -> Swift.String
  @objc deinit
}
extension APSDKMediationFBAudienceNetwork.FBAudienceNetworkInterstitialVideoAdapter : AdPopcornSSPSDK.InterstitialVideoAdapterDelegate {
  final public func interstitialVideoLoadSuccess()
  final public func interstitialVideoLoadFail(error: AdPopcornSSPSDK.NetworkError)
  final public func interstitialVideoShowSuccess(message: Swift.String)
  final public func interstitialVideoShowFail(message: Swift.String)
  final public func interstitialVideoClicked(message: Swift.String)
  final public func interstitialVideoClosed(message: Swift.String)
}
extension AdPopcornSSPSDK.AdPopcornNativeAd {
  @objc @_Concurrency.MainActor @preconcurrency final public func bindFBANRenderer(renderable: APSDKMediationFBAudienceNetwork.APSSPFBANNativeAdRenderable)
  @objc @_Concurrency.MainActor @preconcurrency final public func bindFBANNariveBannerRenderer(renderable: APSDKMediationFBAudienceNetwork.APSSPFBANNativeBannerRenderable)
}
@_inheritsConvenienceInitializers @objc final public class APSSPFBANNativeAdRenderable : ObjectiveC.NSObject {
  @objc final public var adUIView: UIKit.UIView?
  @objc final public var adIconImageView: FBAudienceNetwork.FBMediaView?
  @objc final public var adCoverMediaView: FBAudienceNetwork.FBMediaView?
  @objc final public var adTitleLable: UIKit.UILabel?
  @objc final public var adBodyLabel: UIKit.UILabel?
  @objc final public var adCallToActionButton: UIKit.UIButton?
  @objc final public var adSocialContextLabel: UIKit.UILabel?
  @objc final public var adSponsoredLabel: UIKit.UILabel?
  @objc final public var adChoicesView: FBAudienceNetwork.FBAdChoicesView?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class APSSPFBANNativeBannerRenderable : ObjectiveC.NSObject {
  @objc final public var adUIView: UIKit.UIView?
  @objc final public var adIconImageView: FBAudienceNetwork.FBMediaView?
  @objc final public var adChoicesView: FBAudienceNetwork.FBAdChoicesView?
  @objc final public var adAdvertiserNameLabel: UIKit.UILabel?
  @objc final public var adSponsoredLabel: UIKit.UILabel?
  @objc final public var adCallToActionButton: UIKit.UIButton?
  @objc final public var nativeBannerAd: FBAudienceNetwork.FBNativeBannerAd?
  @objc override dynamic public init()
  @objc deinit
}
final public class FBAudienceNetworkNativeAdapter : AdPopcornSSPSDK.NativeAdapterProtocol {
  final public var render: Swift.AnyObject?
  weak final public var delegate: (any AdPopcornSSPSDK.NativeViewAdapterDelegate)?
  final public var rootViewController: UIKit.UIViewController?
  public init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?, render: Swift.AnyObject, info: [Swift.String : Any?])
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.NativeViewAdapterDelegate)
  final public func disconnectDelegate()
  final public func stop()
  @objc deinit
}
extension APSDKMediationFBAudienceNetwork.FBAudienceNetworkNativeAdapter : AdPopcornSSPSDK.NativeViewAdapterDelegate {
  final public func nativeLoadSuccess()
  final public func nativeLoadFail(error: AdPopcornSSPSDK.NetworkError)
  final public func nativeClicked(message: Swift.String)
  final public func nativeImpression(message: Swift.String)
}
final public class FBAudienceNetworkRewardVideoAdapter : AdPopcornSSPSDK.RewardVideoAdapterInappBiddingProtocol {
  final public var rootViewController: UIKit.UIViewController?
  final public var delegate: (any AdPopcornSSPSDK.RewardVideoAdapterDelegate)?
  public init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?, info: [Swift.String : Any?])
  public init(inappbiddingPlacementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?)
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.RewardVideoAdapterDelegate)
  final public func disconnectDelegate()
  final public func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
  final public func getBiddingToken() -> Swift.String
  @objc deinit
}
extension APSDKMediationFBAudienceNetwork.FBAudienceNetworkRewardVideoAdapter : AdPopcornSSPSDK.RewardVideoAdapterDelegate {
  final public func rewardVideoLoadSuccess()
  final public func rewardVideoLoadFail(error: AdPopcornSSPSDK.NetworkError)
  final public func rewardVideoShowSuccess(message: Swift.String)
  final public func rewardVideoShowFail(message: Swift.String)
  final public func rewardVideoClicked(message: Swift.String)
  final public func rewardVideoClosed(message: Swift.String)
  final public func rewardVideoCompleted()
}
