// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name APSDKMediationUnityAds
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import APSDKMediationUnityAds
import AdPopcornSSPSDK
import Swift
import UIKit
import UnityAds
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class UnityAdsBannerAdapter : AdPopcornSSPSDK.BannerAdapterProtocol {
  weak final public var delegate: (any AdPopcornSSPSDK.BannerAdapterDelegate)?
  weak final public var rootViewController: UIKit.UIViewController?
  public init(placementDic: [Swift.String : Swift.String], bannerType: AdPopcornSSPSDK.AdPopcornBannerSize, rootViewController: UIKit.UIViewController?, info: [Swift.String : Any?])
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.BannerAdapterDelegate)
  final public func disconnectDelegate()
  final public func stop()
  @objc deinit
}
extension APSDKMediationUnityAds.UnityAdsBannerAdapter : AdPopcornSSPSDK.BannerAdapterDelegate {
  final public func bannerViewSuccess(bannerView: UIKit.UIView)
  final public func bannerViewFailed(bannerView: UIKit.UIView, error: AdPopcornSSPSDK.NetworkError)
  final public func bannerViewClicked(message: Swift.String)
  final public func bannerViewImpression(message: Swift.String)
}
final public class UnityAdsInterstitialAdapter : AdPopcornSSPSDK.InterstitialAdapterProtocol {
  final public var rootViewController: UIKit.UIViewController?
  final public var delegate: (any AdPopcornSSPSDK.InterstitialAdapterDelegate)?
  public init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?, info: [Swift.String : Any?])
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.InterstitialAdapterDelegate)
  final public func disconnectDelegate()
  final public func present(from: UIKit.UIViewController, completion: () -> Swift.Void)
  @objc deinit
}
extension APSDKMediationUnityAds.UnityAdsInterstitialAdapter : AdPopcornSSPSDK.InterstitialAdapterDelegate {
  final public func interstitialLoadSuccess()
  final public func interstitialLoadFail(error: AdPopcornSSPSDK.NetworkError)
  final public func interstitialShowSuccess(message: Swift.String)
  final public func interstitialShowFail(message: Swift.String)
  final public func interstitialClicked(message: Swift.String)
  final public func interstitialClosed(message: Swift.String)
}
final public class UnityAdsInterstitialVideoAdapter : AdPopcornSSPSDK.InterstitialVideoAdapterProtocol {
  final public var delegate: (any AdPopcornSSPSDK.InterstitialVideoAdapterDelegate)?
  final public var rootViewController: UIKit.UIViewController?
  public init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?, info: [Swift.String : Any?])
  final public func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.InterstitialVideoAdapterDelegate)
  final public func disconnectDelegate()
  @objc deinit
}
extension APSDKMediationUnityAds.UnityAdsInterstitialVideoAdapter : AdPopcornSSPSDK.InterstitialVideoAdapterDelegate {
  final public func interstitialVideoLoadSuccess()
  final public func interstitialVideoLoadFail(error: AdPopcornSSPSDK.NetworkError)
  final public func interstitialVideoShowSuccess(message: Swift.String)
  final public func interstitialVideoShowFail(message: Swift.String)
  final public func interstitialVideoClicked(message: Swift.String)
  final public func interstitialVideoClosed(message: Swift.String)
}
final public class UnityAdsRewardVideoAdapter : AdPopcornSSPSDK.RewardVideoAdapterProtocol {
  final public var rootViewController: UIKit.UIViewController?
  final public var delegate: (any AdPopcornSSPSDK.RewardVideoAdapterDelegate)?
  public init(placementDic: [Swift.String : Swift.String], rootViewController: UIKit.UIViewController?, info: [Swift.String : Any?])
  final public func connectDelegate(delegate: any AdPopcornSSPSDK.RewardVideoAdapterDelegate)
  final public func disconnectDelegate()
  final public func present(from: UIKit.UIViewController, completion: @escaping () -> Swift.Void)
  @objc deinit
}
extension APSDKMediationUnityAds.UnityAdsRewardVideoAdapter : AdPopcornSSPSDK.RewardVideoAdapterDelegate {
  final public func rewardVideoLoadSuccess()
  final public func rewardVideoLoadFail(error: AdPopcornSSPSDK.NetworkError)
  final public func rewardVideoShowSuccess(message: Swift.String)
  final public func rewardVideoShowFail(message: Swift.String)
  final public func rewardVideoClicked(message: Swift.String)
  final public func rewardVideoClosed(message: Swift.String)
  final public func rewardVideoCompleted()
}
